{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["config","defaultRiseChance","bullRiseChance","bearRiseChance","seasons","App","useState","id","setId","selected","setSelected","isRunning","setIsRunning","title","nick","value","history","coins","setCoins","season","setSeason","riseChance","setRiseChance","getRandom","min","max","Math","floor","random","useEffect","console","log","interval","setInterval","rand","length","newValues","map","c","randInner","newNum","fraction","indexOf","toFixed","curr","master","clearInterval","className","onClick","index","coin","filter","last100","slice","data","labels","i","datasets","label","fill","backgroundColor","borderColor","color","animation","options","maintainAspectRatio","responsive","scales","xAxes","ticks","display","gridLines","drawBorder","yAxes","renderSelected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b0a3e3a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport LineGraph from 'react-line-graph';\nimport { Line } from 'react-chartjs-2';\nimport _ from 'lodash';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nconst config = {\n  defaultRiseChance: 60,\n  bullRiseChance: 90,\n  bearRiseChance: 33,\n  seasons: ['bull', 'bear', 'normal']\n}\n\nconst App = () => {\n\n  const [id, setId] = useState(2);\n  const [selected, setSelected] = useState(1);\n  const [isRunning, setIsRunning] = useState(true);\n  const [coins, setCoins] = useState([{\n    id: 1,\n    title: \"MASTER COIN\",\n    nick: \"MSC\",\n    value: 0,\n    history: []\n  }]);\n  const [season, setSeason] = useState('bull');\n  const [riseChance, setRiseChance] = useState(config.defaultRiseChance);\n\n  const getRandom = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  const master = () => {\n    let rand = Math.floor(Math.random() * 100);\n    if (rand < 5) setSeason(config.seasons[Math.floor(Math.random() * config.seasons.length)]); // Promena sezone\n\n    let newValues = [...coins].map(c => {\n      const randInner = getRandom(0, 100);\n      let newNum = c.value;\n      let fraction = Math.random() * 5;\n      if (randInner < riseChance) {\n        newNum = newNum + fraction;\n      } else {\n        newNum -= fraction;\n      }\n      if ([50, 60, 70].indexOf(randInner) !== -1) newNum += newNum * 10 / 100; // Iznenadni rast\n      if ([20, 30, 40].indexOf(randInner) !== -1) newNum -= newNum * 10 / 100; // Iznenadni pad\n\n      newNum = +newNum.toFixed(3);\n      if (newNum <= 0) newNum = 0;\n\n      return {\n        ...c,\n        value: newNum,\n        history: [...c.history, newNum]\n      };\n    });\n\n    if (rand === 50) {\n      newValues = [...newValues, {\n        id,\n        title: \"ALT Coin #\" + (id),\n        nick: \"AC\" + (id),\n        value: getRandom(1, 100),\n        history: []\n      }];\n\n      setId((curr) => curr + 1);\n    } else if (rand === 40) { // Povlacenje sa marketa\n      // let randomAltCoin = getRandom(1, coins.length - 2);\n\n      // newValues = [...newValues.filter((c, index) => index !== randomAltCoin)];\n    }\n\n    setCoins(newValues);\n  };\n\n  useEffect(() => {\n    console.log(season);\n    switch (season) {\n      case 'bull': setRiseChance(config.bullRiseChance); break;\n      case 'bear': setRiseChance(config.bearRiseChance); break;\n      case 'normal': setRiseChance(config.defaultRiseChance); break;\n      default: setRiseChance(config.defaultRiseChance);\n    }\n\n  }, [season]);\n\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        master();\n      }, 100);\n    }\n    return () => clearInterval(interval);\n\n  }, [isRunning, coins, season, riseChance]);\n\n  const renderSelected = () => {\n    const coin = coins.filter(c => c.id === selected)[0];\n    if (!coin || !coin.id) return <p>No data availible</p>;\n\n    const { title, nick, value, history } = coin;\n\n    const last100 = history.slice(history.length - 200 > 0 ? history.length - 200 : 0, history.length);\n    const data = {\n      labels: [...last100.map((i, index) => index + 1)],\n      datasets: [\n        {\n          label: title + \"'s value\",\n          data: last100,\n          fill: false,\n          backgroundColor: '#0000ff',\n          borderColor: '#00ff00',\n          color: '#fff',\n          animation: false\n        },\n      ],\n    };\n    return (\n      <div key={nick}>\n        {/* <h2>{title}</h2>\n        <h1>{value}</h1> */}\n        {!!history.length && <Line\n          data={data}\n          options={{\n            maintainAspectRatio: false,\n            responsive: true,\n            scales: {\n              xAxes: [{\n                ticks: { display: false },\n                gridLines: {\n                  display: false,\n                  drawBorder: false\n                }\n              }],\n              yAxes: [{\n                ticks: { display: false },\n                gridLines: {\n                  display: false,\n                  drawBorder: false\n                }\n              }]\n            }\n          }}\n        />}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"TopBar\">\n        <button onClick={() => setIsRunning(true)}>Play</button>\n        <button onClick={() => setIsRunning(false)}>Pause</button>\n      </div>\n      <div className=\"Page\">\n        <div className=\"Sidebar\">\n          {\n            coins.map(({ id, title, nick, value }, index) => {\n              return <div\n                className={`CoinCard ${selected === id ? 'selected' : ''}`}\n                key={nick + index}\n                onClick={() => setSelected(id)}\n              >\n                <h2>{title}</h2>\n                <h1>{value}</h1>\n              </div>\n            })\n          }\n        </div>\n        <div className=\"View\">\n          {renderSelected()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}